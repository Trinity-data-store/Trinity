/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SharedService_H
#define SharedService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "shared_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SharedServiceIf {
 public:
  virtual ~SharedServiceIf() {}
  virtual void getStruct(SharedStruct& _return, const int32_t key) = 0;
};

class SharedServiceIfFactory {
 public:
  typedef SharedServiceIf Handler;

  virtual ~SharedServiceIfFactory() {}

  virtual SharedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SharedServiceIf* /* handler */) = 0;
};

class SharedServiceIfSingletonFactory : virtual public SharedServiceIfFactory {
 public:
  SharedServiceIfSingletonFactory(const ::std::shared_ptr<SharedServiceIf>& iface) : iface_(iface) {}
  virtual ~SharedServiceIfSingletonFactory() {}

  virtual SharedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SharedServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<SharedServiceIf> iface_;
};

class SharedServiceNull : virtual public SharedServiceIf {
 public:
  virtual ~SharedServiceNull() {}
  void getStruct(SharedStruct& /* _return */, const int32_t /* key */) {
    return;
  }
};

typedef struct _SharedService_getStruct_args__isset {
  _SharedService_getStruct_args__isset() : key(false) {}
  bool key :1;
} _SharedService_getStruct_args__isset;

class SharedService_getStruct_args {
 public:

  SharedService_getStruct_args(const SharedService_getStruct_args&);
  SharedService_getStruct_args& operator=(const SharedService_getStruct_args&);
  SharedService_getStruct_args() : key(0) {
  }

  virtual ~SharedService_getStruct_args() noexcept;
  int32_t key;

  _SharedService_getStruct_args__isset __isset;

  void __set_key(const int32_t val);

  bool operator == (const SharedService_getStruct_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const SharedService_getStruct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedService_getStruct_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class SharedService_getStruct_pargs {
 public:


  virtual ~SharedService_getStruct_pargs() noexcept;
  const int32_t* key;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _SharedService_getStruct_result__isset {
  _SharedService_getStruct_result__isset() : success(false) {}
  bool success :1;
} _SharedService_getStruct_result__isset;

class SharedService_getStruct_result {
 public:

  SharedService_getStruct_result(const SharedService_getStruct_result&);
  SharedService_getStruct_result& operator=(const SharedService_getStruct_result&);
  SharedService_getStruct_result() {
  }

  virtual ~SharedService_getStruct_result() noexcept;
  SharedStruct success;

  _SharedService_getStruct_result__isset __isset;

  void __set_success(const SharedStruct& val);

  bool operator == (const SharedService_getStruct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SharedService_getStruct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedService_getStruct_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _SharedService_getStruct_presult__isset {
  _SharedService_getStruct_presult__isset() : success(false) {}
  bool success :1;
} _SharedService_getStruct_presult__isset;

class SharedService_getStruct_presult {
 public:


  virtual ~SharedService_getStruct_presult() noexcept;
  SharedStruct* success;

  _SharedService_getStruct_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class SharedServiceClientT : virtual public SharedServiceIf {
 public:
  SharedServiceClientT(std::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  SharedServiceClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void getStruct(SharedStruct& _return, const int32_t key);
  void send_getStruct(const int32_t key);
  void recv_getStruct(SharedStruct& _return);
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef SharedServiceClientT< ::apache::thrift::protocol::TProtocol> SharedServiceClient;

template <class Protocol_>
class SharedServiceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::std::shared_ptr<SharedServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SharedServiceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (SharedServiceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(nullptr), specialized(nullptr) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_getStruct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStruct(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  SharedServiceProcessorT(::std::shared_ptr<SharedServiceIf> iface) :
    iface_(iface) {
    processMap_["getStruct"] = ProcessFunctions(
      &SharedServiceProcessorT::process_getStruct,
      &SharedServiceProcessorT::process_getStruct);
  }

  virtual ~SharedServiceProcessorT() {}
};

typedef SharedServiceProcessorT< ::apache::thrift::protocol::TDummyProtocol > SharedServiceProcessor;

template <class Protocol_>
class SharedServiceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  SharedServiceProcessorFactoryT(const ::std::shared_ptr< SharedServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< SharedServiceIfFactory > handlerFactory_;
};

typedef SharedServiceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > SharedServiceProcessorFactory;

class SharedServiceMultiface : virtual public SharedServiceIf {
 public:
  SharedServiceMultiface(std::vector<std::shared_ptr<SharedServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SharedServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<SharedServiceIf> > ifaces_;
  SharedServiceMultiface() {}
  void add(::std::shared_ptr<SharedServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getStruct(SharedStruct& _return, const int32_t key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStruct(_return, key);
    }
    ifaces_[i]->getStruct(_return, key);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class SharedServiceConcurrentClientT : virtual public SharedServiceIf {
 public:
  SharedServiceConcurrentClientT(std::shared_ptr< Protocol_> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(prot);
  }
  SharedServiceConcurrentClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void getStruct(SharedStruct& _return, const int32_t key);
  int32_t send_getStruct(const int32_t key);
  void recv_getStruct(SharedStruct& _return, const int32_t seqid);
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

typedef SharedServiceConcurrentClientT< ::apache::thrift::protocol::TProtocol> SharedServiceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#include "SharedService.tcc"
#include "shared_types.tcc"

#endif
