/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MDTrieShard_H
#define MDTrieShard_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "rpc_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MDTrieShardIf {
 public:
  virtual ~MDTrieShardIf() {}
  virtual void get(std::string& _return, const int64_t key) = 0;
};

class MDTrieShardIfFactory {
 public:
  typedef MDTrieShardIf Handler;

  virtual ~MDTrieShardIfFactory() {}

  virtual MDTrieShardIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MDTrieShardIf* /* handler */) = 0;
};

class MDTrieShardIfSingletonFactory : virtual public MDTrieShardIfFactory {
 public:
  MDTrieShardIfSingletonFactory(const ::std::shared_ptr<MDTrieShardIf>& iface) : iface_(iface) {}
  virtual ~MDTrieShardIfSingletonFactory() {}

  virtual MDTrieShardIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MDTrieShardIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MDTrieShardIf> iface_;
};

class MDTrieShardNull : virtual public MDTrieShardIf {
 public:
  virtual ~MDTrieShardNull() {}
  void get(std::string& /* _return */, const int64_t /* key */) {
    return;
  }
};

typedef struct _MDTrieShard_get_args__isset {
  _MDTrieShard_get_args__isset() : key(false) {}
  bool key :1;
} _MDTrieShard_get_args__isset;

class MDTrieShard_get_args {
 public:

  MDTrieShard_get_args(const MDTrieShard_get_args&);
  MDTrieShard_get_args& operator=(const MDTrieShard_get_args&);
  MDTrieShard_get_args() : key(0) {
  }

  virtual ~MDTrieShard_get_args() noexcept;
  int64_t key;

  _MDTrieShard_get_args__isset __isset;

  void __set_key(const int64_t val);

  bool operator == (const MDTrieShard_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const MDTrieShard_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MDTrieShard_get_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MDTrieShard_get_pargs {
 public:


  virtual ~MDTrieShard_get_pargs() noexcept;
  const int64_t* key;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MDTrieShard_get_result__isset {
  _MDTrieShard_get_result__isset() : success(false) {}
  bool success :1;
} _MDTrieShard_get_result__isset;

class MDTrieShard_get_result {
 public:

  MDTrieShard_get_result(const MDTrieShard_get_result&);
  MDTrieShard_get_result& operator=(const MDTrieShard_get_result&);
  MDTrieShard_get_result() : success() {
  }

  virtual ~MDTrieShard_get_result() noexcept;
  std::string success;

  _MDTrieShard_get_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MDTrieShard_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MDTrieShard_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MDTrieShard_get_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MDTrieShard_get_presult__isset {
  _MDTrieShard_get_presult__isset() : success(false) {}
  bool success :1;
} _MDTrieShard_get_presult__isset;

class MDTrieShard_get_presult {
 public:


  virtual ~MDTrieShard_get_presult() noexcept;
  std::string* success;

  _MDTrieShard_get_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class MDTrieShardClientT : virtual public MDTrieShardIf {
 public:
  MDTrieShardClientT(std::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  MDTrieShardClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void get(std::string& _return, const int64_t key);
  void send_get(const int64_t key);
  void recv_get(std::string& _return);
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef MDTrieShardClientT< ::apache::thrift::protocol::TProtocol> MDTrieShardClient;

template <class Protocol_>
class MDTrieShardProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::std::shared_ptr<MDTrieShardIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MDTrieShardProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (MDTrieShardProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(nullptr), specialized(nullptr) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  MDTrieShardProcessorT(::std::shared_ptr<MDTrieShardIf> iface) :
    iface_(iface) {
    processMap_["get"] = ProcessFunctions(
      &MDTrieShardProcessorT::process_get,
      &MDTrieShardProcessorT::process_get);
  }

  virtual ~MDTrieShardProcessorT() {}
};

typedef MDTrieShardProcessorT< ::apache::thrift::protocol::TDummyProtocol > MDTrieShardProcessor;

template <class Protocol_>
class MDTrieShardProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  MDTrieShardProcessorFactoryT(const ::std::shared_ptr< MDTrieShardIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MDTrieShardIfFactory > handlerFactory_;
};

typedef MDTrieShardProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > MDTrieShardProcessorFactory;

class MDTrieShardMultiface : virtual public MDTrieShardIf {
 public:
  MDTrieShardMultiface(std::vector<std::shared_ptr<MDTrieShardIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MDTrieShardMultiface() {}
 protected:
  std::vector<std::shared_ptr<MDTrieShardIf> > ifaces_;
  MDTrieShardMultiface() {}
  void add(::std::shared_ptr<MDTrieShardIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(std::string& _return, const int64_t key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, key);
    }
    ifaces_[i]->get(_return, key);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class MDTrieShardConcurrentClientT : virtual public MDTrieShardIf {
 public:
  MDTrieShardConcurrentClientT(std::shared_ptr< Protocol_> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(prot);
  }
  MDTrieShardConcurrentClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void get(std::string& _return, const int64_t key);
  int32_t send_get(const int64_t key);
  void recv_get(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

typedef MDTrieShardConcurrentClientT< ::apache::thrift::protocol::TProtocol> MDTrieShardConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#include "MDTrieShard.tcc"
#include "rpc_types.tcc"

#endif
